schema {
  query: QueryRoot
  mutation: MutationRoot
}

directive @auth on FIELD

type Contract {
  address: ID!
  walletAddress: String!
  name: String!
  schema: Schema!
  network: Network!
  createdAt: DateTime!
  tokens(after: String, before: String, first: Int, last: Int): TokenConnection!
  stockTokens(
    after: String
    before: String
    first: Int
    last: Int
  ): TokenConnection!
  sellOrderTokens(
    after: String
    before: String
    first: Int
    last: Int
  ): TokenConnection!
}

type ContractConnection {
  # Information to aid in pagination.
  pageInfo: PageInfo!

  # A list of edges.
  edges: [ContractEdge!]!

  # A list of nodes.
  nodes: [Contract!]!
}

input ContractCreateInput {
  address: String!
  abi: String!
}

# An edge in a connection.
type ContractEdge {
  # The item at the end of the edge
  node: Contract!

  # A cursor for use in pagination
  cursor: String!
}

scalar DateTime

input MintInput {
  workId: String!
  gsPath: String!
  isAsync: Boolean!
}

type MutationRoot {
  contractCreate(input: ContractCreateInput!): Contract!
  mint(input: MintInput!): Boolean!
  sell(input: SellInput!): Boolean!
  transfer(input: TransferInput!): Boolean!
}

type MyWallet {
  address: String!
  balance: Float!
  contracts(
    after: String
    before: String
    first: Int
    last: Int
  ): ContractConnection!
}

enum Network {
  AVALANCHE
}

# Information about pagination in a connection
type PageInfo {
  # When paginating backwards, are there more items?
  hasPreviousPage: Boolean!

  # When paginating forwards, are there more items?
  hasNextPage: Boolean!

  # When paginating backwards, the cursor to continue.
  startCursor: String

  # When paginating forwards, the cursor to continue.
  endCursor: String
}

type QueryRoot {
  wallet: MyWallet!
  contract(address: ID!): Contract!
  contractMulti(addresses: [ID!]!): [Contract!]!
  token(address: String!, tokenId: String!): Token!
}

enum Schema {
  ERC721
  ERC1155
}

input SellInput {
  address: String!
  tokenId: String!
  ether: Float!
  isAsync: Boolean!
}

type Token {
  id: ID!
  address: String!
  tokenId: String!
  workId: String!
  imageUrl: String!
  name: String!
  description: String!
  priceEth: Float
  isOwner: Boolean!
  createdAt: DateTime!
}

type TokenConnection {
  # Information to aid in pagination.
  pageInfo: PageInfo!

  # A list of edges.
  edges: [TokenEdge!]!

  # A list of nodes.
  nodes: [Token!]!
}

# An edge in a connection.
type TokenEdge {
  # The item at the end of the edge
  node: Token!

  # A cursor for use in pagination
  cursor: String!
}

input TransferInput {
  address: String!
  tokenId: String!
  toAddress: String!
  isAsync: Boolean!
}
